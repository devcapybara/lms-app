{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create axios instance with auth header\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const userAPI = {\n  // Get all students with enrollment data\n  getAllStudents: async () => {\n    try {\n      const response = await api.get('/users/students');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching students:', error);\n      throw error;\n    }\n  },\n  // Get student by ID\n  getStudentById: async studentId => {\n    try {\n      const response = await api.get(`/users/students/${studentId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching student:', error);\n      throw error;\n    }\n  },\n  // Approve enrollment\n  approveEnrollment: async (studentId, courseId) => {\n    try {\n      const response = await api.put(`/users/students/${studentId}/enrollments/${courseId}/approve`);\n      return response.data;\n    } catch (error) {\n      console.error('Error approving enrollment:', error);\n      throw error;\n    }\n  },\n  // Reject enrollment\n  rejectEnrollment: async (studentId, courseId) => {\n    try {\n      const response = await api.put(`/users/students/${studentId}/enrollments/${courseId}/reject`);\n      return response.data;\n    } catch (error) {\n      console.error('Error rejecting enrollment:', error);\n      throw error;\n    }\n  },\n  // Get dashboard stats\n  getDashboardStats: async () => {\n    try {\n      const response = await api.get('/users/dashboard-stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching dashboard stats:', error);\n      throw error;\n    }\n  },\n  // Update student progress\n  updateStudentProgress: async (studentId, courseId, progress) => {\n    try {\n      const response = await api.put(`/users/students/${studentId}/courses/${courseId}/progress`, {\n        progress\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating progress:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","userAPI","getAllStudents","response","get","data","error","console","getStudentById","studentId","approveEnrollment","courseId","put","rejectEnrollment","getDashboardStats","updateStudentProgress","progress"],"sources":["D:/lms-app/frontend/src/utils/userAPI.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance with auth header\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add auth token to requests\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const userAPI = {\r\n  // Get all students with enrollment data\r\n  getAllStudents: async () => {\r\n    try {\r\n      const response = await api.get('/users/students');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching students:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get student by ID\r\n  getStudentById: async (studentId) => {\r\n    try {\r\n      const response = await api.get(`/users/students/${studentId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching student:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Approve enrollment\r\n  approveEnrollment: async (studentId, courseId) => {\r\n    try {\r\n      const response = await api.put(`/users/students/${studentId}/enrollments/${courseId}/approve`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error approving enrollment:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Reject enrollment\r\n  rejectEnrollment: async (studentId, courseId) => {\r\n    try {\r\n      const response = await api.put(`/users/students/${studentId}/enrollments/${courseId}/reject`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error rejecting enrollment:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get dashboard stats\r\n  getDashboardStats: async () => {\r\n    try {\r\n      const response = await api.get('/users/dashboard-stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching dashboard stats:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update student progress\r\n  updateStudentProgress: async (studentId, courseId, progress) => {\r\n    try {\r\n      const response = await api.put(`/users/students/${studentId}/courses/${courseId}/progress`, {\r\n        progress\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating progress:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}